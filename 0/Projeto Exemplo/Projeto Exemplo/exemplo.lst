


ARM Macro Assembler    Page 1 


    1 00000000         ; Exemplo.s
    2 00000000         ; Desenvolvido para a placa EK-TM4C1294XL
    3 00000000         ; Prof. Guilherme Peron
    4 00000000         ; 12/03/2018
    5 00000000         
    6 00000000         ; ------------------------------------------------------
                       -------------------------
    7 00000000                 THUMB                        ; Instruções do tip
                                                            o Thumb-2
    8 00000000         ; ------------------------------------------------------
                       -------------------------
    9 00000000         ; Declarações EQU - Defines
   10 00000000         ;<NOME>         EQU <VALOR>
   11 00000000         ; ------------------------------------------------------
                       -------------------------
   12 00000000         ; Área de Dados - Declarações de variáveis
   13 00000000                 AREA             DATA, ALIGN=2
   14 00000000         ; Se alguma variável for chamada em outro arquivo
   15 00000000         ;EXPORT  <var> [DATA,SIZE=<tam>]   ; Permite chamar a va
                       riável <var> a 
   16 00000000         ; partir de outro arquivo
   17 00000000         ;<var> SPACE <tam>                        ; Declara uma 
                       variável de nome <var>
   18 00000000         ; de <tam> bytes a partir da primeira 
   19 00000000         ; posição da RAM  
   20 00000000         
   21 00000000         ; ------------------------------------------------------
                       -------------------------
   22 00000000         ; Área de Código - Tudo abaixo da diretiva a seguir será
                        armazenado na memória de 
   23 00000000         ;                  código
   24 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
   25 00000000         
   26 00000000         ; Se alguma função do arquivo for chamada em outro arqui
                       vo 
   27 00000000                 EXPORT           Start       ; Permite chamar a 
                                                            função Start a part
                                                            ir de 
   28 00000000         ; outro arquivo. No caso startup.s
   29 00000000         
   30 00000000         ; Se chamar alguma função externa 
   31 00000000         ;IMPORT <func>              ; Permite chamar dentro dest
                       e arquivo uma 
   32 00000000         ; função <func>
   33 00000000         
   34 00000000         ; ------------------------------------------------------
                       -------------------------
   35 00000000         ; Função main()
   36 00000000         
   37 00000000 20000400 
                       memInicio
                               EQU              0x20000400
   38 00000000 20000600 
                       memFim  EQU              0x20000600
   39 00000000         
   40 00000000         Start
   41 00000000         ; Comece o código aqui <================================
                       ======================



ARM Macro Assembler    Page 2 


   42 00000000         
   43 00000000 F8DF A0E8       LDR              R10, =memInicio ; ponteiro do l
                                                            oop externo
   44 00000004 F8DF C0E8       LDR              R12, =memFim
   45 00000008 F8BC 2000       LDRH             R2, [R12]
   46 0000000C F1AA 0A02       SUB              R10, R10, #2
   47 00000010 E008            B                loopExterno
   48 00000012         
   49 00000012         atualiza
   50 00000012 F8DA 4000       LDR              R4, [R10]
   51 00000016 F8DB 5000       LDR              R5, [R11]
   52 0000001A F8AB 4000       STRH             R4, [R11]
   53 0000001E F8AA 5000       STRH             R5, [R10]
   54 00000022 E011            B                loopInternoNext
   55 00000024         
   56 00000024         loopExterno
   57 00000024 F10A 0A02       ADD              R10, R10, #2
   58 00000028 F8BA 0000       LDRH             R0, [R10]
   59 0000002C 4290            CMP              R0, R2
   60 0000002E D00E            BEQ              fim
   61 00000030         
   62 00000030 F10A 0B02       ADD              R11, R10, #2
   63 00000034         
   64 00000034         loopInterno
   65 00000034 F8BB 1000       LDRH             R1, [R11]
   66 00000038 4291            CMP              R1, R2
   67 0000003A D0F3            BEQ              loopExterno
   68 0000003C         
   69 0000003C F8BA 0000       LDRH             R0, [R10]
   70 00000040 F8BB 1000       LDRH             R1, [R11]
   71 00000044 4288            CMP              R0, R1
   72 00000046 DCE4            BGT              atualiza
   73 00000048         
   74 00000048         loopInternoNext
   75 00000048 F10B 0B02       ADD              R11, R11, #2
   76 0000004C E7F2            B                loopInterno
   77 0000004E         
   78 0000004E         
   79 0000004E         
   80 0000004E         ; ============================================
   81 0000004E         
   82 0000004E         fim
   83 0000004E         
   84 0000004E         ; inicializa as variáveis
   85 0000004E         ;MOV R4, #4     ; razao
   86 0000004E         ;LDR R0, =memInicio   ; ponteiro do inicio da lista
   87 0000004E         ;MOV R1, R0     ; ponteiro do proximo elemento da lista
   88 0000004E         ;B inicio
   89 0000004E         
   90 0000004E         
   91 0000004E 4D27            LDR              R5, =memInicio ; início da list
                                                            a (valores originai
                                                            s)
   92 00000050 4E26            LDR              R6, =memInicio ; usado depois p
                                                            ara j
   93 00000052 F8DF 90A0       LDR              R9, =0x20000500 ; início da lis
                                                            ta das razões (onde
                                                             salvar)
   94 00000056         



ARM Macro Assembler    Page 3 


   95 00000056         loopExterno2
   96 00000056 882A            LDRH             R2, [R5]    ; a[i]
   97 00000058 2A00            CMP              R2, #0
   98 0000005A D017            BEQ              inicioPG    ;
   99 0000005C         
  100 0000005C F105 0602       ADD              R6, R5, #2  ; j = i+1
  101 00000060         
  102 00000060         loopInterno2
  103 00000060 8833            LDRH             R3, [R6]    ; a[j]
  104 00000062 2B00            CMP              R3, #0
  105 00000064 D00C            BEQ              proxI       ; fim da linha, pas
                                                            sa pro próximo i
  106 00000066         
  107 00000066         ; calcula razão r = a[j] / a[i], se exata
  108 00000066 FBB3 F0F2       UDIV             R0, R3, R2  ; r = a[j] / a[i]
  109 0000006A FB00 3112       MLS              R1, R0, R2, R3 ; resto = a[j] -
                                                             r*a[i]
  110 0000006E 2900            CMP              R1, #0
  111 00000070 D103            BNE              proxJ       ; não é inteiro ? i
                                                            gnora
  112 00000072         
  113 00000072         ; se resto == 0, então r é válido
  114 00000072 F8A9 0000       STRH             R0, [R9]    ; salva razão
  115 00000076 F109 0902       ADD              R9, R9, #2  ; avança ponteiro d
                                                            e razões
  116 0000007A         
  117 0000007A         ; razao
  118 0000007A         ;MOV R4, R0
  119 0000007A         ;LDR R0, =memInicio
  120 0000007A         ;MOV R1, R0
  121 0000007A         ;B inicio
  122 0000007A         
  123 0000007A         proxJ
  124 0000007A F106 0602       ADD              R6, R6, #2
  125 0000007E E7EF            B                loopInterno2
  126 00000080         
  127 00000080         proxI
  128 00000080 F105 0502       ADD              R5, R5, #2
  129 00000084 E7E7            B                loopExterno2
  130 00000086         
  131 00000086         
  132 00000086         atualizaPilha
  133 00000086 F84D BD04       PUSH             {R11}
  134 0000008A E004            B                inicio
  135 0000008C         ;B atualizarSeqAux
  136 0000008C         
  137 0000008C         
  138 0000008C         inicioPG
  139 0000008C F04F 0404       MOV              R4, #4      ; razao
  140 00000090 4816            LDR              R0, =memInicio ; ponteiro do in
                                                            icio da lista
  141 00000092 4601            MOV              R1, R0      ; ponteiro do proxi
                                                            mo elemento da list
                                                            a
  142 00000094 E7FF            B                inicio
  143 00000096         
  144 00000096         inicio
  145 00000096 F8B0 A000       LDRH             R10, [R0]   ; conteudo de R10
  146 0000009A F101 0102       ADD              R1, R1, #2  ; atualiza o pontei



ARM Macro Assembler    Page 4 


                                                            ro de R1 
  147 0000009E F8B1 B000       LDRH             R11, [R1]
  148 000000A2 F1BB 0F00       CMP              R11, #0
  149 000000A6 D009            BEQ              atualizaPonteiroIncio
  150 000000A8         
  151 000000A8         
  152 000000A8 FBBB F3FA       UDIV             R3, R11, R10
  153 000000AC FB03 B41A       MLS              R4, R3, R10, R11
  154 000000B0 2C00            CMP              R4, #0      ; se R4 == 0, ent é
                                                             inteiro
  155 000000B2 D000            BEQ              verificaRazao
  156 000000B4 E7EF            B                inicio
  157 000000B6         
  158 000000B6         verificaRazao
  159 000000B6 2B04            CMP              R3, #4
  160 000000B8 D0E5            BEQ              atualizaPilha
  161 000000BA E7EC            B                inicio
  162 000000BC         
  163 000000BC         atualizaPonteiroIncio
  164 000000BC F100 0002       ADD              R0, R0, #2
  165 000000C0 4601            MOV              R1, R0
  166 000000C2 F8B0 A000       LDRH             R10, [R0]
  167 000000C6 F1BA 0F00       CMP              R10, #0
  168 000000CA D000            BEQ              fimPG
  169 000000CC E7E3            B                inicio
  170 000000CE         
  171 000000CE         fimPG
  172 000000CE         
  173 000000CE 4808            LDR              R0, =memFim
  174 000000D0 4F06            LDR              R7, =memInicio
  175 000000D2 F107 0704       ADD              R7, R7, #4
  176 000000D6 F1A0 0002       SUB              R0, R0, #2
  177 000000DA         
  178 000000DA         salvarPG
  179 000000DA         
  180 000000DA BC02            POP              {R1}
  181 000000DC         
  182 000000DC 45BD            CMP              R13, R7
  183 000000DE D003            BEQ              acabou
  184 000000E0         
  185 000000E0 F100 0002       ADD              R0, R0, #2
  186 000000E4 8001            STRH             R1, [R0]
  187 000000E6 E7F8            B                salvarPG
  188 000000E8         
  189 000000E8         acabou
  190 000000E8         
  191 000000E8         
  192 000000E8         
  193 000000E8         
  194 000000E8         
  195 000000E8         
  196 000000E8         
  197 000000E8         ; R10 = elemento atual (a[i])
  198 000000E8         ; R11 = elemento seguinte (a[i+1])
  199 000000E8         
  200 000000E8         ;LDRH R0, [R11]        ; b = a[i+1]
  201 000000E8         ;LDRH R1, [R10]        ; a = a[i]
  202 000000E8         ;UDIV R3, R0, R1       ; r = b / a
  203 000000E8         ;MLS  R4, R3, R1, R0   ; resto = b - r*a



ARM Macro Assembler    Page 5 


  204 000000E8         ;CMP  R4, #0
  205 000000E8         ;BNE proximoDivisor    ; se resto != 0, não é divisor vá
                       lido
  206 000000E8         
  207 000000E8 BF00            NOP
  208 000000EA 00 00           ALIGN                        ; garante que o fim
                                                             da seção está alin
                                                            hada 
  209 000000EC                 END                          ; fim do arquivo
              20000400 
              20000600 
              20000500 
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp.sp --apcs=
interwork --depend=.\exemplo.d -o.\exemplo.o -IC:\Users\Usuário\AppData\Local\A
rm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C129 --predefine="__EVAL SETA 1"
 --predefine="__UVISION_VERSION SETA 536" --predefine="TM4C1294NCPDT SETA 1" --
list=.\exemplo.lst exemplo.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

DATA 00000000

Symbol: DATA
   Definitions
      At line 13 in file exemplo.s
   Uses
      None
Comment: DATA unused
1 symbol



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 24 in file exemplo.s
   Uses
      None
Comment: .text unused
Start 00000000

Symbol: Start
   Definitions
      At line 40 in file exemplo.s
   Uses
      At line 27 in file exemplo.s
Comment: Start used once
acabou 000000E8

Symbol: acabou
   Definitions
      At line 189 in file exemplo.s
   Uses
      At line 183 in file exemplo.s
Comment: acabou used once
atualiza 00000012

Symbol: atualiza
   Definitions
      At line 49 in file exemplo.s
   Uses
      At line 72 in file exemplo.s
Comment: atualiza used once
atualizaPilha 00000086

Symbol: atualizaPilha
   Definitions
      At line 132 in file exemplo.s
   Uses
      At line 160 in file exemplo.s
Comment: atualizaPilha used once
atualizaPonteiroIncio 000000BC

Symbol: atualizaPonteiroIncio
   Definitions
      At line 163 in file exemplo.s
   Uses
      At line 149 in file exemplo.s
Comment: atualizaPonteiroIncio used once
fim 0000004E

Symbol: fim
   Definitions
      At line 82 in file exemplo.s
   Uses
      At line 60 in file exemplo.s
Comment: fim used once
fimPG 000000CE

Symbol: fimPG



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 171 in file exemplo.s
   Uses
      At line 168 in file exemplo.s
Comment: fimPG used once
inicio 00000096

Symbol: inicio
   Definitions
      At line 144 in file exemplo.s
   Uses
      At line 134 in file exemplo.s
      At line 142 in file exemplo.s
      At line 156 in file exemplo.s
      At line 161 in file exemplo.s
      At line 169 in file exemplo.s

inicioPG 0000008C

Symbol: inicioPG
   Definitions
      At line 138 in file exemplo.s
   Uses
      At line 98 in file exemplo.s
Comment: inicioPG used once
loopExterno 00000024

Symbol: loopExterno
   Definitions
      At line 56 in file exemplo.s
   Uses
      At line 47 in file exemplo.s
      At line 67 in file exemplo.s

loopExterno2 00000056

Symbol: loopExterno2
   Definitions
      At line 95 in file exemplo.s
   Uses
      At line 129 in file exemplo.s
Comment: loopExterno2 used once
loopInterno 00000034

Symbol: loopInterno
   Definitions
      At line 64 in file exemplo.s
   Uses
      At line 76 in file exemplo.s
Comment: loopInterno used once
loopInterno2 00000060

Symbol: loopInterno2
   Definitions
      At line 102 in file exemplo.s
   Uses
      At line 125 in file exemplo.s
Comment: loopInterno2 used once
loopInternoNext 00000048



ARM Macro Assembler    Page 3 Alphabetic symbol ordering
Relocatable symbols


Symbol: loopInternoNext
   Definitions
      At line 74 in file exemplo.s
   Uses
      At line 54 in file exemplo.s
Comment: loopInternoNext used once
proxI 00000080

Symbol: proxI
   Definitions
      At line 127 in file exemplo.s
   Uses
      At line 105 in file exemplo.s
Comment: proxI used once
proxJ 0000007A

Symbol: proxJ
   Definitions
      At line 123 in file exemplo.s
   Uses
      At line 111 in file exemplo.s
Comment: proxJ used once
salvarPG 000000DA

Symbol: salvarPG
   Definitions
      At line 178 in file exemplo.s
   Uses
      At line 187 in file exemplo.s
Comment: salvarPG used once
verificaRazao 000000B6

Symbol: verificaRazao
   Definitions
      At line 158 in file exemplo.s
   Uses
      At line 155 in file exemplo.s
Comment: verificaRazao used once
19 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

memFim 20000600

Symbol: memFim
   Definitions
      At line 38 in file exemplo.s
   Uses
      At line 44 in file exemplo.s
      At line 173 in file exemplo.s

memInicio 20000400

Symbol: memInicio
   Definitions
      At line 37 in file exemplo.s
   Uses
      At line 43 in file exemplo.s
      At line 91 in file exemplo.s
      At line 92 in file exemplo.s
      At line 140 in file exemplo.s
      At line 174 in file exemplo.s

2 symbols
358 symbols in table
